<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.MemberMapper">
    <resultMap id="memberMap" type="member.Member" >
        <!--필드명이 다를 때 결과를 어떻게 매핑할 것인지 알려줌-->
        <result column="USER_NO" property="userNo" />
        <result column="USER_ID" property="userId" />
        <result column="USER_PW" property="userPw" />
        <result column="USER_NM" property="userNm" />
        <result column="MOBILE" property="mobile" />
        <result column="REG_DT" property="regDt" />
        <result column="MOD_DT" property="modDt" />
    </resultMap>
    <!--resultType에서 resultMap으로 변경, 값은 id와 동일하게-->

    <select id="getList" resultMap="memberMap">
        SELECT * FROM MEMBER <!--SQL 문장 끝에 세미콜론 붙이면 안됨 =오류 발생-->
    </select>
    <!-- WHERE과 AND를 없애주기 위해 trim 태그 사용
    <select id="getList3" resultMap="memberMap">
        SELECT * FROM MEMBER
        <trim prefix="WHERE" prefixOverrides="AND | OR">
        <if test="userId != null">
            USER_ID = #{userId}
        </if>
        <if test="userNm != null">
            AND USER_NM LIKE #{userNm}
        </if>
        <if test="userId != null">
            AND MOBILE LIKE #{mobile}
        </if>
        </trim>
    </select>
        -->
    <select id="getList3" resultMap="memberMap">
        <!--양 끝에 %가 붙는 형태로 자동완성됨-->
        <bind name="P_userNm" value="'%' + _parameter.getUserNm() + '%'"/>
        <bind name="P_mobile" value="'%' + _parameter.getMobile() + '%'"/>
    SELECT * FROM MEMBER
        <where> <!--조건이 있을 때 where 태그 사용, trim 태그보다 짧다-->
            <if test="userId != null">
                USER_ID = #{userId}
            </if>
            <if test="userNm != null">
                AND USER_NM LIKE #{P_userNm}
            </if>
            <if test="userId != null">
                AND MOBILE LIKE #{P_mobile}
            </if>
        </where>
    </select>
    <select id="getList4" resultMap="memberMap">
        SELECT * FROM MEMBER
        <where>
            <!--콤마로 구분-->
            <foreach item="item" index="index" collection="list"
                open="USER_ID_IN(" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </select>
    <select id="getList5">
        SELECT * FROM MEMBER WHERE
        <![CDATA[
            USER_NO > #{userNo}
        ]]>
        <!--문자 그대로 인식-->
    </select>

    <insert id="register">
        INSERT INTO MEMBER (USER_NO, USER_ID, USER_PW, USER_NM, MOBILE)
        VALUES (SEQ_MEMBER.NEXTVAL, #{userId}, #{userPw}, #{userNm}, #{mobile}})
        <!--변수명과 동일하게 입력-->
    </insert>
    <insert id="register2">
        <selectKey keyProperty="userNo" order="BEFORE" resultType="long">
            SELECT SEQ_MEMBER.NEXTVAL FROM DUAL
        </selectKey>
        <!--위 쿼리가 insert 쿼리 전에 수행해야 함/ SEQ_MEMBER.NEXTVAL
            증감번호-대리키 가져오는 작업-->
        INSERT INTO MEMBER (USER_NO, USER_ID, USER_PW, USER_NM, MOBILE)
        VALUES (#{userNo}, #{userId}, #{userPw}, #{userNm}, #{mobile})
    </insert>
    <!-- trim 태그 prefix, suffixOverrides: 마지막 콤마를 없애줘서 문법적 오류 방지
    <update id="modify">
        UPDATE MEMBER
            <trim prefix="SET" suffixOverrides=",">
                <if test = "userPw != null">
                USER_PW=#{userPw},
                </if>
                <if test="userNm != null">
                USER_NM=#{userNm},
                </if>
                <if test="mobile != null">
                MOBILE= #{mobile},
                </if>
            </trim>
            WHERE USER_ID = #{userId}
    </update>
    -->
    <update id="modify">
        UPDATE MEMBER
        <!-- 동적 SQL: 값이 있을 때만 추가, set 태그 사용-->
        <set>
            <if test = "userPw != null">
                USER_PW=#{userPw},
            </if>
            <if test="userNm != null">
                USER_NM=#{userNm},
            </if>
            <if test="mobile != null">
                MOBILE= #{mobile},
            </if>
        </set>
        WHERE USER_ID = #{userId}
    </update>

    <delete id="delete">
        DELETE FROM MEMBER WHERE USER_ID = #{userId}
    </delete>
</mapper>