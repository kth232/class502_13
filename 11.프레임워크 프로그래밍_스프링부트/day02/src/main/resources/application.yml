server:
  port:3000
#들여쓰기로 구분, 라인 맞춰줘야 같은 하위 속성으로 인식함

# 다른 설정이라면 들여쓰기 제거해야 함, 아니면 위 설정의 하위 속성으로 인식함
spring:
  #데이터베이스 설정, 어떤 DB를 사용할 건지 알려줘야 함
  datasource:
    driver-class-name: oracle.jdbc.driver.OracleDriver # 값은 무조건 한 칸 띄우고 작성해야 인식함
    #'-'가 들어있는 경우 카멜케이스 방식으로도 작성 가능(driverClassName), properties는 '-'로만 작성해야 함
    url: jdbc:oracle:thin:@localhost:1521:XE #배포 시 환경변수로 작성
    userName: ${db.username} #환경 변수로 대체
    password: ${db.password}

  #JPA 설정, sql 설정을 알려줘야 형식에 맞게 sql문 작성 가능
  jpa:
    properties:
      hibernate:
        show_sql: true #실행하는 SQL을 콘솔에 출력
        format_sql: true #실행되는 SQL의 들여쓰기 및 줄 개행
        use_sql_comments: true #jpa가 쿼리를 만들어주는데 주석도 같이 만들어줌
        #dialect: org.hibernate.dialect.OracleDialect #방언처럼 다른 DB간의 차이를 인식함
        #최근 것은 dialect 명시 없어도 드라이버를 보고 알아서 인식함, 옛날 거는 버전, 드라이버 등 명시해줘야 함
        default_batch_fetch_size: 100 #100개씩 끊어서 조회->일괄처리 시 메모리 부족 현상 방지
        
    hibernate:
      ddlAuto: create #ddl-auto: 데이터 정의어(Data Definition Language) 자동화->클래스에 작성하면 테이블 등 자동 생성해줌
      #create: 실행할 때마다 기존 테이블을 드롭하고 새로 테이블 생성, update: 수정사항만 반영, 배포 시는 none: 변경 x
  


#로거 설정, 쿼리에 물음표로 출력되는 바인드 파라미터 출력
#logging:
#  level:
#    org:
#      hibernate:
#        type:
#          descriptor:
#            sql: trace


#패키지 명이 길다면 온점으로 구분해서 한줄로 작성 가능
logging:
  level:
    org.hibernate.type: trace
    org.hibernate.orm.jdbc.bind: trace
